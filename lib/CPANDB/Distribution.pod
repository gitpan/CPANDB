=head1 NAME

CPANDB::Distribution - CPANDB class for the distribution table

=head1 SYNOPSIS

  TO BE COMPLETED

=head1 DESCRIPTION

TO BE COMPLETED

=head1 GRAPH METHODS

CPANDB::Distribution comes with support for integrating with various types
of graphing systems.

=head2 dependency_graph

  my $graph = CPANDB->distribution('Acme')->dependency_graph;

You will need to install L<Graph> to get access to this method, otherwise
it will throw an exception on use.

The C<dependency_graph> method is used to generate a L<Graph>-based
graph for a given distribution and all of its depedendencies recursively,
including cross dependencies between the recursive dependencies.

The graph is directional with edges from a distribution to the
modules it depends on.

These graphs are recommended for general graph analysis computation.

=head2 dependency_easy

  my $easy = CPANDB->distribution('Acme')->dependency_easy;

You will need to install L<Graph::Easy> to get access to this method,
otherwise it will throw an exception on use.

The C<dependency_easy> method is used to generate a L<Graph::Easy>-based
graph for a given distribution and all of its depedendencies recursively,
including cross dependencies between the recursive dependencies.

The graph is directional with edges from a distribution to the
modules it depends on.

The use of Graph::Easy is currently not recommended, as it has scaling
issues with the very large graphs that L<CPANDB> often produces (especially
in the layout engine). It is provided for completeness.

=head2 dependency_graphviz

  CPANDB->distribution('Acme')->dependency_graphviz->as_svg('Acme.svg');

You will need to install L<Graphviz> to get access to this method,
otherwise it will throw an exception on use.

The C<dependency_graphviz> method is used to generate a L<Graphviz>-based
graph for a given distribution and all of its depedendencies recursively,
including cross dependencies between the recursive dependencies.

The graph is directional with edges from a distribution to the
modules it depends on.

These graphs are recommended for use in graphics and visualisation.

More-complex types of graphs are also possible. For example, the following
culls the dependency graph of anything that won't require an install on
Perl 5.6, including only runtime dependencies, and runs an alternative
layour engine for the graph.

  CPANDB->distribution('Acme')->dependency_graphviz(
      perl        => 5.006,
      phase       => 'runtime',
      layout      => 'neato',
      directed    => 1,
      concentrate => 1,
  )->as_svg('Acme.svg');

Apart from the "perl" and "phase" parameters, all other params are passed
down to the underlying L<Graphviz> object. So you can use anything that it
supports.

=head1 DATABASE METHODS

=head2 select

  # Get all objects in list context
  my @list = CPANDB::Distribution->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = CPANDB::Distribution->select(
      'where distribution > ? order by distribution',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
distribution table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM distribution> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<CPANDB::Distribution> objects when called in list context, or a
reference to an ARRAY of B<CPANDB::Distribution> objects when called in scalar context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 count

  # How many objects are in the table
  my $rows = CPANDB::Distribution->count;
  
  # How many objects 
  my $small = CPANDB::Distribution->count(
      'where distribution > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
distribution table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM distribution> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 distribution

  if ( $object->distribution ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.


REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The distribution table was originally created with the
following SQL command.

  CREATE TABLE distribution (
  	distribution TEXT NOT NULL PRIMARY KEY,
  	version TEXT NULL,
  	author TEXT NOT NULL,
  	meta INTEGER NOT NULL,
  	license TEXT NULL,
  	release TEXT NOT NULL,
  	uploaded TEXT NOT NULL,
  	pass INTEGER NOT NULL,
  	fail INTEGER NOT NULL,
  	unknown INTEGER NOT NULL,
  	na INTEGER NOT NULL,
  	rating TEXT NULL,
  	ratings INTEGER NOT NULL,
  	weight INTEGER NOT NULL,
  	volatility INTEGER NOT NULL,
  	FOREIGN KEY ( author ) REFERENCES author ( author )
  )

=head1 SUPPORT

CPANDB::Distribution is part of the L<CPANDB> API.

See the documentation for L<CPANDB> for more information.

=head1 AUTHOR

The Author

=head1 COPYRIGHT

Copyright 2009 The Author.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

